{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jason/IdeaProjects/react-exercises/src/lists-conditionals--assignment-problem/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ValidationComponent from \"./ValidationComponent\";\nimport CharComponent from \"./CharComponent\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lengthSize: 0,\n      inputString: \"\"\n    };\n\n    this.textLength = event => {\n      this.setState({\n        lengthSize: event.target.value.length,\n        inputString: event.target.value\n      });\n    };\n\n    this.deleteCharHandler = charIndex => {\n      //BOTH OF THESE WAYS WORK\n      // FIRST WAY USING SLICE\n      // const persons = this.state.persons.slice();\n      // SECOND WAY USING ... MORE MODERN\n      const charString = this.state.inputString;\n      charString.slice(charIndex, 1);\n      this.setState({\n        inputString: charString\n      });\n    };\n  }\n\n  render() {\n    let charString = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.inputString.split('').map((char, index) => {\n        return /*#__PURE__*/_jsxDEV(CharComponent, {\n          click: () => this.deleteCharHandler(index),\n          letter: char\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 30\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"strike\", {\n            children: \"Create an input field (in App component) with a change listener which outputs the length of the entered text below it (e.g. in a paragraph).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"strike\", {\n            children: \"Create a new component (=> ValidationComponent) which receives the text length as a prop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"strike\", {\n            children: \"Inside the ValidationComponent, either output \\\"Text too short\\\" or \\\"Text long enough\\\" depending on the text length (e.g. take 5 as a minimum length)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"strike\", {\n            children: \"Create another component (=> CharComponent) and style it as an inline box (=> display: inline-block, padding: 16px, text-align: center, margin: 16px, border: 1px solid black).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"strike\", {\n            children: \"Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in the initial input field) as a prop.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"When you click a CharComponent, it should be removed from the entered text.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Hint: Keep in mind that JavaScript strings are basically arrays!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: this.textLength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.lengthSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ValidationComponent, {\n        textLength: this.state.lengthSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CharComponent, {\n        letter: this.state.inputString\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), charString]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jason/IdeaProjects/react-exercises/src/lists-conditionals--assignment-problem/src/App.js"],"names":["React","Component","ValidationComponent","CharComponent","App","state","lengthSize","inputString","textLength","event","setState","target","value","length","deleteCharHandler","charIndex","charString","slice","render","split","map","char","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBI,KAFwB,GAEhB;AACJC,MAAAA,UAAU,EAAE,CADR;AAEJC,MAAAA,WAAW,EAAE;AAFT,KAFgB;;AAAA,SAOxBC,UAPwB,GAOVC,KAAD,IAAW;AACpB,WAAKC,QAAL,CAAc;AACVJ,QAAAA,UAAU,EAAEG,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,MADrB;AAEVN,QAAAA,WAAW,EAAEE,KAAK,CAACE,MAAN,CAAaC;AAFhB,OAAd;AAIH,KAZuB;;AAAA,SAcxBE,iBAdwB,GAcHC,SAAD,IAAe;AAC/B;AAEA;AACA;AAEA;AACA,YAAMC,UAAU,GAAG,KAAKX,KAAL,CAAWE,WAA9B;AAEAS,MAAAA,UAAU,CAACC,KAAX,CAAiBF,SAAjB,EAA4B,CAA5B;AAEA,WAAKL,QAAL,CAAc;AAACH,QAAAA,WAAW,EAAES;AAAd,OAAd;AACH,KA1BuB;AAAA;;AA6B1BE,EAAAA,MAAM,GAAG;AACL,QAAIF,UAAU,gBACV;AAAA,gBAEQ,KAAKX,KAAL,CAAWE,WAAX,CAAuBY,KAAvB,CAA6B,EAA7B,EAAiCC,GAAjC,CAAqC,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClD,4BAAO,QAAC,aAAD;AACH,UAAA,KAAK,EAAE,MAAM,KAAKR,iBAAL,CAAuBQ,KAAvB,CADV;AAEH,UAAA,MAAM,EAAED;AAFL;AAAA;AAAA;AAAA;AAAA,gBAAP;AAIH,OALD;AAFR;AAAA;AAAA;AAAA;AAAA,YADJ;;AAYF,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA,gCACI;AAAA,iCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,iCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,iCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA,iCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA,iCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBALJ,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAWI;AAAO,QAAA,QAAQ,EAAE,KAAKb;AAAtB;AAAA;AAAA;AAAA;AAAA,cAXJ,eAYI;AAAA,kBAAK,KAAKH,KAAL,CAAWC;AAAhB;AAAA;AAAA;AAAA;AAAA,cAZJ,eAaI,QAAC,mBAAD;AAAqB,QAAA,UAAU,EAAE,KAAKD,KAAL,CAAWC;AAA5C;AAAA;AAAA;AAAA;AAAA,cAbJ,eAeI,QAAC,aAAD;AAAe,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWE;AAAlC;AAAA;AAAA;AAAA;AAAA,cAfJ,EAgBKS,UAhBL;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;;AA/DyB;;AAkE5B,eAAeZ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ValidationComponent from \"./ValidationComponent\";\nimport CharComponent from \"./CharComponent\"\n\nclass App extends Component {\n\n    state = {\n        lengthSize: 0,\n        inputString: \"\"\n    }\n\n    textLength = (event) => {\n        this.setState({\n            lengthSize: event.target.value.length,\n            inputString: event.target.value}\n            );\n    }\n\n    deleteCharHandler = (charIndex) => {\n        //BOTH OF THESE WAYS WORK\n\n        // FIRST WAY USING SLICE\n        // const persons = this.state.persons.slice();\n\n        // SECOND WAY USING ... MORE MODERN\n        const charString = this.state.inputString;\n\n        charString.slice(charIndex, 1);\n\n        this.setState({inputString: charString})\n    }\n\n\n  render() {\n      let charString = (\n          <div>\n              {\n                  this.state.inputString.split('').map((char, index) => {\n                      return <CharComponent\n                          click={() => this.deleteCharHandler(index)}\n                          letter={char}\n                      />\n                  })\n              }\n          </div>\n      )\n    return (\n      <div className=\"App\">\n        <ol>\n            <li><strike>Create an input field (in App component) with a change listener which outputs the length of the entered text below it (e.g. in a paragraph).</strike></li>\n            <li><strike>Create a new component (=> ValidationComponent) which receives the text length as a prop</strike></li>\n            <li><strike>Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough\" depending on the text length (e.g. take 5 as a minimum length)</strike></li>\n            <li><strike>Create another component (=> CharComponent) and style it as an inline box (=> display: inline-block, padding: 16px, text-align: center, margin: 16px, border: 1px solid black).</strike></li>\n            <li><strike>Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in the initial input field) as a prop.</strike></li>\n          <li>When you click a CharComponent, it should be removed from the entered text.</li>\n        </ol>\n        <p>Hint: Keep in mind that JavaScript strings are basically arrays!</p>\n\n          <input onChange={this.textLength}/>\n          <p >{this.state.lengthSize}</p>\n          <ValidationComponent textLength={this.state.lengthSize} />\n\n          <CharComponent letter={this.state.inputString} />\n          {charString}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}